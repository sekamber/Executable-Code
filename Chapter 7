# Setting up Selenium WebDriver: A hands-on guide
# Launch your IDE.For Maven projects, add the Selenium dependency in the pom.xml file:
xml
<dependency>
<groupId>org.seleniumhq.selenium</groupId>
<artifactId>selenium-java</artifactId>
<version>YOUR_DOWNLOADED_VERSION</version>
</dependency>

# Initialization for Various Browsers:
# a. Google Chrome:
java
System.setProperty(“webdriver.chrome.driver”, “PATH_TO_CHROMEDRIVER”);
WebDriver driver = new ChromeDriver();
# b. Mozilla Firefox:
java
System.setProperty(“webdriver.gecko.driver”, “PATH_TO_GECKODRIVER”);
WebDriver driver = new FirefoxDriver();
# c. Internet Explorer:
java
System.setProperty(“webdriver.ie.driver”, “PATH_TO_IEDRIVER”);
WebDriver driver = new InternetExplorerDriver();

# Integrating Selenium Tests into CI/CD Pipelines
# Here's an example of a Jenkins pipeline script that includes Selenium tests:

pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                // Build your project
            }
        }
        stage('Test') {
            steps {
                // Run Selenium tests
                sh 'mvn clean test'
            }
        }
    }
}

# Parallel Execution with Selenium Grid: Utilize Selenium Grid to execute tests in parallel across different environments, ensuring faster feedback and comprehensive coverage.
# Configure your CI tool to distribute tests across available nodes in the Selenium Grid. Here's an example of setting up Selenium Grid with Jenkins:
pipeline {
    agent any
    stages {
        stage('Test') {
            steps {
                sh 'mvn clean test -DgridURL=http://selenium-grid-url:4444/wd/hub'
            }
        }
    }
}

# Scheduled Testing: Configure your CI tool to schedule tests for nightly builds or at specified intervals.
# Ensure that Selenium tests are included in the scheduled build process to maintain software health.
# Example configuration for scheduling tests in Jenkins:
pipeline {
    agent any
    triggers {
        cron('H 0 * * *')
    }
    stages {
        stage('Nightly Test') {
            steps {
                sh 'mvn clean test'
            }
        }
    }
}

# Setting up Selenium WebDriver: Follow these steps to set up Selenium WebDriver for your automated testing:
# Add Selenium dependency in your Maven project's pom.xml file:
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>YOUR_DOWNLOADED_VERSION</version>
</dependency>

# Browser Driver Setup: Place the downloaded browser driver in a known directory and set the path in your system's PATH variable or specify it in your script.
# Initialize WebDriver for various browsers in your test script.
# Example initialization for Chrome
System.setProperty("webdriver.chrome.driver", "PATH_TO_CHROMEDRIVER");
WebDriver driver = new ChromeDriver();

# Crafting an end-to-end test with Selenium. Follow the given steps to craft an end-to-end test with Selenium:

# 1. Launching the browser: Every Selenium test commences with the launching of a web browser. Here is a simple initialization using Chrome:
java
System.setProperty(“webdriver.chrome.driver”, “PATH_TO_CHROMEDRIVER”);
WebDriver driver = new ChromeDriver();

#2.Navigating to the website: Direct the browser to open your application, as shown:
java
driver.get(“https://www.yourwebsite.com”);

# 3. Interacting with elements: Identify web elements using locators and perform actions.
java
WebElement searchBox = driver.findElement(By.id(“search-input”));
searchBox.sendKeys(“Selenium Guide”);
searchBox.submit();

# 4. Asserting outcomes: Once you have performed actions, validate the outcome. Assertions are a critical component as they determine the success or failure of a test:
java
String pageTitle = driver.getTitle();
Assert.assertEquals(“Expected Title”, pageTitle);

#5.Closing the browser: Wrap up by closing the browser, freeing up resources, as shown:
java
driver.quit();

# Integration of Selenium tests into CI tools
#  Scripting for CI: Your Selenium tests may need slight modifications to run on CI servers. For instance, running tests on headless browsers (browsers without GUI) is common in CI environments:
java
ChromeOptions options = new ChromeOptions();
options.addArguments(“—headless”);
WebDriver driver = new ChromeDriver(options);

# Parameterizing Tests for Data-Driven Testing
# 2.	Read Test Data:
# Use libraries or built-in functions to read test data from external files into your test scripts.
# Here's an example of reading test data from a CSV file using Java:

BufferedReader reader = new BufferedReader(new FileReader("test_data.csv"));
String line;
while ((line = reader.readLine()) != null) {
    String[] data = line.split(",");
}
reader.close();

# 3.Parameterize Test Methods: Modify your test methods to accept input parameters corresponding to the test data.
# Pass different sets of test data to the test methods for execution.
# Example of parameterized test method in TestNG:

@Test(dataProvider = "testData")
public void testLogin(String username, String password) {
}

@DataProvider(name = "testData")
public Object[][] testData() {
    return new Object[][] {
        {"user1", "password1"},
        {"user2", "password2"},
    };
}


# Automating form submissions
# Exercise 1: Accessing form elements. Most forms consist of text boxes, radio buttons, checkboxes, dropdowns, and buttons.
# Text boxes:
java
WebElement username = driver.findElement(By.id(“username”)); username.sendKeys(“testUser”);

# Radio buttons and checkboxes:
java
WebElement radioButton = driver.findElement(By.id(“genderMale”)); radioButton.click();
# Dropdowns: Using Select class for dropdown options:
java
 
Select dropdown = new Select(driver.findElement(By.id(“country”)));
dropdown.selectByVisibleText(“United States”);

# Exercise 2: Submitting the form. After filling out the form, you often click a submit button:
java
WebElement submitButton = driver.findElement(By.id(“submit”)); submitButton.click();

# Exercise 3: Form validations and feedback handling. Ensure your application handles errors gracefully and gives appropriate feedback.
# Form error message:
java
WebElement errorMsg = driver.findElement(By.id(“formError”));
Assert.assertEquals(“Please fill out this field.”, errorMsg.getText());

# Success feedback:
java
WebElement successMsg = driver.findElement(By.id(“formSuccess”));
Assert.assertTrue(successMsg.isDisplayed());

# Navigating between pages and managing browser activities
# Exercise 4: Navigating to another page. Use driver’s navigate method:
java
driver.navigate().to(“https://www.anotherpage.com”);

# Exercise 5: Managing browser history. Use driver's navigate method: driver.navigate().back() to go back to the previous page. You can also use driver.navigate().forward() to go forward to the next page in the browser history, as shown:
java
driver.navigate().back();    // Goes back one step in the browser history
driver.navigate().forward(); // Goes forward
driver.navigate().refresh(); // Refreshes the current page

# Exercise 6: Handling cookies. Cookies often store user preferences or session information.
# Add a cookie:
java
Cookie ck = new Cookie(“username”, “testUser”);
driver.manage().addCookie(ck);
# Get a cookie by name:
java
Cookie cookie = driver.manage().getCookieNamed(“username”);
# Delete a cookie:
java
driver.manage().deleteCookie(ck);

# Exercise 7: Validating page transitions. After navigating, always validate that you are on the right page:
java
String pageTitle = driver.getTitle();
Assert.assertEquals(“Expected Page Title”, pageTitle);

# Basics of setting up grid nodes
# Registering a node: Nodes are where tests will run. Register nodes with the hub.
bash
java -jar selenium-server-standalone-<version>.jar -role node -hub http://HUB_IP_ADDRESS:4444/grid/register

# Setting tests for mobile platforms
# Android: Ensure the Android SDK is installed. Use AndroidDriver in your Selenium tests:
java
DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(“platformName”, “Android”); capabilities.setCapability(“deviceName”, “Your_Device_Name”);
WebDriver driver = new AndroidDriver(new URL(“http://localhost:4723/wd/hub”), capabilities);

# iOS: Ensure you have Xcode and the iOS SDK. Use iOSDriver for tests:
java
DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(“platformName”, “iOS”); capabilities.setCapability(“deviceName”, “Your_iPhone_Name”);
WebDriver driver = new IOSDriver(new URL(“http://localhost:4723/wd/hub”), capabilities);

# Selenium IDE: Record and playback
# Cross-browser testing with Selenium. Ensuring web application compatibility across browsers is paramount. Selenium simplifies this with drivers tailored for various browsers.
# Chrome: Download the ChromeDriver executable corresponding to your Chrome version:
java
System.setProperty(“webdriver.chrome.driver”, “PATH_TO_CHROMEDRIVER”);
WebDriver driver = new ChromeDriver();

#	Firefox: Download geckodriver for Firefox:
java
 
System.setProperty(“webdriver.gecko.driver”, “PATH_TO_GECKODRIVER”);
WebDriver driver = new FirefoxDriver();

#	Edge: Ensure you have the Microsoft Edge Driver for your Edge version:
java
System.setProperty(“webdriver.edge.driver”, “PATH_TO_EDGEDRIVER”);
WebDriver driver = new EdgeDriver();

# Dealing with dynamic web elements
# Waits in Selenium. 
# 1.Implicit waits: This sets a default waiting time for all elements. If an action is not immediately possible, Selenium retries up to the specified duration.
java
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

# 2.Explicit waits: They wait for a specific condition before proceeding. It is versatile, allowing for conditions like element visibility, element to be clickable, etc:
java
WebDriverWait wait = new WebDriverWait(driver, 20); wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(“dynamicElement”)));

# Capturing screenshots with Selenium
# For taking a screenshot, you can:
java
File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(srcFile, new File(“screenshot.png”));

# Extracting web data with Selenium
# Techniques for accessing web data
# Textual content: Extract text from elements, useful for validating labels, paragraphs, and more.
java
String content = driver.findElement(By.id(“elementId”)).getText();
# Attributes: Access attributes of web elements. This can be useful for extracting links from anchor tags, checking values of input fields, and more:
java
String attributeValue = driver.findElement(By.id(“elementId”)).getAttribute(“attributeName”);
# Form elements: Extract values, selected options, or check states.
# Input fields: 
driver.findElement(By.name(“username”)).getAttribute(“value”);
# Dropdowns: 
new Select(driver.findElement(By.id(“dropdownId”))).getFirstSelectedOption().getText();
# Checkboxes: 
driver.findElement(By.id(“checkboxId”)).isSelected();

